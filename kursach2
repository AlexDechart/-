#include <iostream>
#include <fstream>
#include <vector>
#include <stdexcept>
#include <string>
using namespace std;
class DigitSensor {
private:
    vector<double> values_;
    double min_value_;
    double max_value_;
    double precision_;
public:
    DigitSensor(const string& filename, double min_value, double max_value, double precision) : min_value_(min_value), max_value_(max_value), precision_(precision){
        ifstream file(filename);
        if (!file.is_open()) {
            throw invalid_argument("Не удалось открыть файл " + filename);
        }
        double value;
        while (file >> value) {
            if (value < min_value_ || value > max_value_) {
                throw invalid_argument("Значение " + to_string(value) + " находится вне зоны досягаемости [" + to_string(min_value_) + ", " + to_string(max_value_) + "]");
            }
            values_.push_back(value);
        }
        if (values_.empty()) {
            throw invalid_argument("Значения не были считаны из файла " + filename);
        }
    }
    double GetValue(size_t index) const {
        if (index >= values_.size()) {
            throw out_of_range("Индекс " + to_string(index) + " находится вне зоны досягаемости [0, " + to_string(values_.size() - 1) + "]");
        }
        return values_[index];
    }
    size_t GetSize() const {
        return values_.size();
    }
};
int main() {
    try {
        DigitSensor sensor("data.txt", 0.0, 100.0, 0.1);
        for (size_t i = 0; i < sensor.GetSize(); ++i) {
            cout << "Значение " << i + 1 << ": " << sensor.GetValue(i) << endl;
        }
    }
    catch (const exception& ex) {
        cerr << ex.what() << endl;
    }
    return 0;
}
